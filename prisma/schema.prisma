generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model SpectralFormat {
  id      Int   @id @default(autoincrement())
  modelId Int
  dataX   Int
  dataY   Int
  model   Model @relation("SpectralDataFormat", fields: [modelId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model SpectralRealDataFormat {
  id      Int   @id @default(autoincrement())
  modelId Int
  dataX   Int
  dataY   Int
  model   Model @relation("SpectralRealDataFormat", fields: [modelId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model SpectralImaginaryDataFormat {
  id      Int   @id @default(autoincrement())
  modelId Int
  dataX   Int
  dataY   Int
  model   Model @relation("SpectralImaginaryDataFormat", fields: [modelId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Model {
  id            Int                           @id @default(autoincrement())
  title         String
  message       String
  createdAt     DateTime                      @default(now())
  authorId      Int
  author        User                          @relation("Author", fields: [authorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  spectralData  SpectralFormat[]              @relation("SpectralDataFormat")
  imaginaryPart SpectralImaginaryDataFormat[] @relation("SpectralImaginaryDataFormat")
  realPart      SpectralRealDataFormat[]      @relation("SpectralRealDataFormat")
}

model User {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  email          String   @unique
  password       String
  profileId      Int
  authoredModels Model[]  @relation("Author")
  profile        Profile  @relation("Profile", fields: [profileId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([profileId], map: "IFK_UserProfileId")
}

model Profile {
  id             Int     @id @default(autoincrement())
  firstName      String
  lastName       String
  profilePicture String?
  User           User[]  @relation("Profile")
}
